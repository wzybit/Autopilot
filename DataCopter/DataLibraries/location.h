/*
 *@File     : location.h
 *@Author   : wangbo
 *@Date     : May 10, 2017
 *@Copyright: 2018 Beijing Institute of Technology. All right reserved.
 *@Warning  : ?????????????????????????-??????????????
 */
#ifndef HEADERS_LOCATION_H_
#define HEADERS_LOCATION_H_

#include <stdint.h>


/*
 * ???????????,??????,???????110?,??????????110??0,????????
 * ????????,??????????0?
 */
#define REFERENCE_LONGITUDE_MERCATOR 110.0*M_PI/180.0

/*???? ??:?[m]*/
#define EARTH_RADIUS 6378137.0

/*????,??????????????*/
#define EARTH_CIRCUMFERENCE 20037508.34

#ifndef M_PI
#define M_PI       3.14159265358979323846
#define M_1_PI 0.31830988618379067154
#endif

//struct T_LOCATION
//{
//	double lng;
//	double lat;
//	double alt;
//};
typedef struct Location {
    uint8_t		id;					///< command id
    uint8_t		options;			///< options bitmask (1<<0 = relative altitude)
    uint8_t		p1;					///< param 1
    uint8_t     speed;              /// m/s
    int32_t		alt;				///< param 2 - Altitude in centimeters (meters * 100)
    double		lat;				///< param 3 - Lattitude * 10**7
    double		lng;				///< param 4 - Longitude * 10**7
}T_Location;


struct T_NED
{
    double x;
    double y;
    double z;
};

/*
 * ??????
 */
double convert_degree_to_radian(double degree);

/*
 * ??????
 */
double convert_radian_to_degree(double radian);

/*
 * ?????? -PI~+PI ??
 * wrap an angle defined in radians to -PI ~ PI (equivalent to +- 180 degrees)
*/
double wrap_PI(double angle_in_radians);

/*
 * ?????? 0~2PI??
 * wrap an angle in radians to 0..2PI
*/
double wrap_2PI(double angle);

/*
 * ????????????????????????
 */
double get_distance_loc_to_loc(T_Location *loc_start, T_Location *loc_end);

/*
 * ????????x??,??????
 */
double get_mercator_x(T_Location *loc);

/*
 * ????????y??,??????
 */
double get_mercator_y(T_Location *loc);

/*
 * ?????????????,?????3???,
 * ?????1??????current_loc???????specific_loc????????
 * 2??????????????????????????????
 */
unsigned char arrive_specific_location_radius(T_Location *current_loc, T_Location *specific_loc,unsigned int arrive_radius);
//unsigned char arrive_specific_location_over_line_project_NED(T_Location *last_target_loc,T_Location *current_loc,T_Location *target_loc);

/*
 * ????????,????last_target_loc?target_loc?2????????????????
 */
double get_bearing_point_2_point_NED(T_Location *last_target_loc, T_Location *target_loc);

///*
// * ?????????,??????current?????2????????
// * ????????,?????????????????,????
// */
//double get_cross_track_error_NED(T_Location *last_target_loc,T_Location *current_loc,T_Location *target_loc);

///*
// * ?????????????????
// * ???????????,???????????????????,????????
// */
//double get_cross_track_error_correct_radian_NED(T_Location *last_target_loc,T_Location *current_loc, T_Location *target_loc);

///*
// * ????????????????
// * ???????PID???
// */
//double get_cross_track_error_correct_radian_NED_PID(T_Location *last_target_loc,
//		                                                                                                T_Location *current_loc, T_Location *target_loc,
//		                                                                                                 void *pid_class_ptr);

#endif /* HEADERS_LOCATION_H_ */
